[{"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\index.js":"1","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\reportWebVitals.js":"2","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\App.js":"3","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\Home.js":"4","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Login\\Login.js":"5","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Login\\PrivateRoute.js":"6","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\Dashboard\\Dashboard.js":"7","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\Navbar.js":"8","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Login\\firebase.config.js":"9","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\AboutUs.js":"10","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Login\\LoginManager.js":"11","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\Main.js":"12","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\Blood\\BloodDonationUser.js":"13","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\fakeData\\AdminData.js":"14","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Admin\\DateForDonation.js":"15","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\Blood\\BloodRequistUser.js":"16","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Admin\\AllDonorList.js":"17","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Admin\\AllBloodRequisitor.js":"18","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\MessageModal\\MessageModal.js":"19","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\money\\MoneyDonation.js":"20","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\money\\Payment.js":"21"},{"size":500,"mtime":1611440138000,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1611440138000,"results":"24","hashOfConfig":"23"},{"size":979,"mtime":1611440138000,"results":"25","hashOfConfig":"23"},{"size":310,"mtime":1613727519116,"results":"26","hashOfConfig":"23"},{"size":6425,"mtime":1614160877243,"results":"27","hashOfConfig":"23"},{"size":1154,"mtime":1611440138000,"results":"28","hashOfConfig":"23"},{"size":6586,"mtime":1616257454223,"results":"29","hashOfConfig":"23"},{"size":2957,"mtime":1616256907592,"results":"30","hashOfConfig":"23"},{"size":338,"mtime":1611440138000,"results":"31","hashOfConfig":"23"},{"size":2518,"mtime":1613728205964,"results":"32","hashOfConfig":"23"},{"size":4042,"mtime":1611440138000,"results":"33","hashOfConfig":"23"},{"size":2453,"mtime":1616256892872,"results":"34","hashOfConfig":"23"},{"size":9299,"mtime":1611440138000,"results":"35","hashOfConfig":"23"},{"size":182,"mtime":1611440138000,"results":"36","hashOfConfig":"23"},{"size":4497,"mtime":1611440138000,"results":"37","hashOfConfig":"23"},{"size":7700,"mtime":1611440138000,"results":"38","hashOfConfig":"23"},{"size":2292,"mtime":1611440138000,"results":"39","hashOfConfig":"23"},{"size":2463,"mtime":1611440138000,"results":"40","hashOfConfig":"23"},{"size":2447,"mtime":1613926990208,"results":"41","hashOfConfig":"23"},{"size":2169,"mtime":1616260347688,"results":"42","hashOfConfig":"23"},{"size":156,"mtime":1616259678726,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1ebeim4",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\index.js",[],["97","98"],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\reportWebVitals.js",[],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\App.js",["99"],"import logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { createContext, useState } from 'react';\nimport Login from './Components/Login/Login';\nimport Home from './Components/Home/Home';\nimport PrivateRoute from './Components/Login/PrivateRoute';\nimport Dashboard from './Components/Dashboard/Dashboard/Dashboard';\n\nexport const UserContext = createContext();\n\nfunction App() {\n  const [loggedInUser, setLoggedInUser] = useState({});\n  return (\n    <UserContext.Provider value={[loggedInUser, setLoggedInUser]}>\n      <Router>\n        <Switch>\n          <Route path=\"/login\">\n            <Login></Login>\n          </Route>\n          <PrivateRoute path=\"/dashboard\">\n            <Dashboard></Dashboard>\n          </PrivateRoute>\n          <Route exact path=\"/\">\n            <Home></Home>\n          </Route>\n        </Switch>\n      </Router>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\Home.js",[],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Login\\Login.js",["100"],"import React, { useContext, useState } from 'react';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from './firebase.config';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport LoginBg from '../Image/Login/background.png';\nimport { createUserWithEmailAndPassword, handleGoogleSignIn, initializeLoginFramework, signInWithEmailAndPassword, handleFbSignIn } from './LoginManager';\nimport { UserContext } from '../../App';\nimport googleimage from \"../Image/Login/google-icon.png\";\nimport fbimage from \"../Image/Login/fb.png\";\nimport './Login.css';\nimport logo from '../Image/logo.jpg';\n\n\nconst Login = () => {\n    const [newUser, setNewUser] = useState(false);\n    const [user, setUser] = useState({\n        isSignedIn: false,\n        name: '',\n        email: '',\n        password: '',\n        photo: ''\n    });\n\n\n    initializeLoginFramework();\n\n\n    const [loggedInUser, setLoggedInUser] = useContext(UserContext);\n    console.log(loggedInUser)\n    const history = useHistory();\n    const location = useLocation();\n\n    const { from } = location.state || { from: { pathname: \"/dashboard\" } };\n\n\n    if (firebase.apps.length === 0) {\n        firebase.initializeApp(firebaseConfig);\n    }\n\n    const googleSignIn = () => {\n        handleGoogleSignIn()\n            .then(res => {\n                handleResponse(res, true);\n            })\n    }\n\n    const fbSignIn = () => {\n        handleFbSignIn()\n            .then(res => {\n                handleResponse(res, true);\n            })\n    }\n\n    const handleResponse = (res, redirect) => {\n        setUser(res);\n        setLoggedInUser(res);\n        if (redirect) {\n            history.replace(from);\n        }\n    }\n\n    const handleBlur = (e) => {\n        let isFieldValid = true;\n        if (e.target.name === 'email') {\n            isFieldValid = /\\S+@\\S+\\.\\S+/.test(e.target.value);\n        }\n        if (e.target.name === 'password') {\n            const isPasswordValid = e.target.value.length > 6;\n            const passwordHasNumber = /\\d{1}/.test(e.target.value);\n            isFieldValid = isPasswordValid && passwordHasNumber;\n            console.log(isPasswordValid && passwordHasNumber);\n        }\n        if (isFieldValid) {\n            const newUserInfo = { ...user };\n            console.log(user);\n            newUserInfo[e.target.name] = e.target.value;\n            setUser(newUserInfo);\n        }\n    }\n\n    const handleSubmit = (e) => {\n        if (newUser && user.email && user.password) {\n            createUserWithEmailAndPassword(user.name, user.email, user.password)\n                .then(res => {\n                    // handleResponse(res, true);\n                    setUser(res);\n                    setLoggedInUser(res);\n\n                })\n        }\n        if (!newUser && user.email && user.password) {\n            signInWithEmailAndPassword(user.email, user.password)\n                .then(res => {\n                    handleResponse(res, true);\n                    // setUser(res);\n                    // setLoggedInUser(res);\n                    // history.replace(from);\n                })\n        }\n        e.preventDefault();\n    }\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"row align-items-center\" style={{ height: \"100vh\" }}>\n                <div className=\"col-md-10\">\n                    <div className=\"border\" >\n                        <div>\n                            <Link to=\"/\">\n                                <img src={logo} style={{ width: 50, height: 50 }} alt=\"logo\" />\n                            </Link>\n                        </div>\n                        <h4>Login</h4>\n                        <form onSubmit={handleSubmit}>\n                            {newUser && <input type=\"text\" className=\"inputBox\" name=\"name\" onBlur={handleBlur} placeholder=\"Your Name\" />}\n                            <br />\n                            <input type=\"text\" name=\"email\" className=\"inputBox\" onBlur={handleBlur} placeholder=\"Your Email address\" required />\n                            <br />\n                            <input type=\"password\" name=\"password\" className=\"inputBox\" onBlur={handleBlur} placeholder=\"Password\" required />\n                            <br />\n\n                            <div className=\"d-flex justify-content-around\">\n                                <div><input type=\"checkbox\" name=\"userRemember\" id=\"\" />\n                                    <label htmlFor=\"userRemember\">Remember me</label></div>\n                                <a href=\"#\">Forget Password</a>\n                            </div>\n                            <input type=\"submit\" className=\"submitBox\" value={newUser ? 'Sign Up' : 'Sign In'} />\n                        </form>\n                        <p style={{ color: 'red' }}>{user.error}</p>\n                        {user.success && <p style={{ color: 'green' }}>User {newUser ? 'created' : 'Logged In'} successfully</p>}\n\n                        <p className=\"no-account-text text-center\">\n                            Don't have an account?\n                        <span\n                                onClick={() => window.open(\"https://rb.gy/eibnw4\", \"_blank\")}\n                                className=\"create-account-link text-primary\"\n                            >\n                                Create an Google account\n                        </span>\n                        </p>\n\n                        <input type=\"checkbox\" onChange={() => setNewUser(!newUser)} name=\"newUser\" id=\"\" />\n                        <label htmlFor=\"newUser\">New User Sign up</label><br></br>\n                        <div className=\"d-flex justify-content-around mb-2\">\n                            <button onClick={googleSignIn} className=\"button\"><img src={googleimage} style={{ width: 20, height: 20 }} alt=\"\" />Continue with Google</button>\n                            <button onClick={fbSignIn} className=\"button\"><img src={fbimage} style={{ width: 20, height: 20 }} alt=\"\" />Continue with Facebook</button>\n                            <br></br>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div className=\"col-md-2 d-none d-md-block align-self-end\">\n                    <img className=\"img-fluid\" src={LoginBg} alt=\"\" />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Login\\PrivateRoute.js",["101","102","103"],"import React, { useEffect, useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useContext } from 'react';\n\nimport jwt_decode from \"jwt-decode\";\nimport { UserContext } from '../../App';\n\nconst PrivateRoute = ({children, ...rest}) => {\n    const [loggedInUser, setLoggedInUser] = useContext(UserContext);\n    \n    const isLoggedIn = () => {\n      const token = sessionStorage.getItem('token');\n      if(!token){\n        return false;\n      }\n      const decodedToken = jwt_decode(token);\n      \n      // get current time\n      const currentTime = new Date().getTime() / 1000;\n      // compare the expiration time with the current time\n      // will return false if expired and will return true if not expired\n      return decodedToken.exp > currentTime;\n    }\n    return (\n        <Route\n      {...rest}\n      render={({ location }) =>\n        (loggedInUser.email || isLoggedIn()) ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n    );\n};\n\nexport default PrivateRoute;","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\Dashboard\\Dashboard.js",["104","105","106"],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\Navbar.js",["107"],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Login\\firebase.config.js",[],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\AboutUs.js",[],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Login\\LoginManager.js",["108","109","110"],"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseConfig from './firebase.config';\n\nexport const initializeLoginFramework = () => {\n    if (firebase.apps.length === 0) {\n        firebase.initializeApp(firebaseConfig);\n    }\n}\nexport const handleGoogleSignIn = () => {\n    const googleProvider = new firebase.auth.GoogleAuthProvider();\n    return firebase.auth().signInWithPopup(googleProvider)\n        .then(res => {\n            const { displayName, photoURL, email } = res.user\n            const signInUser = {\n                isSignedIn: true,\n                name: displayName,\n                photo: photoURL,\n                success: true,\n                email: email,\n            }\n            // console.log(signInUser);\n            setUserToken();\n            return signInUser;\n            // console.log(displayName, photoURL, email);\n        })\n        .catch(err => {\n            console.log(err);\n        })\n}\nconst setUserToken = () => {\n    firebase.auth().currentUser.getIdToken(/* forceRefresh */ true).then(function (idToken) {\n        sessionStorage.setItem('token', idToken)\n        // console.log(idToken)\n        // Send token to your backend via HTTPS\n        // ...\n    }).catch(function (error) {\n        // Handle error\n    });\n}\nexport const handleFbSignIn = () => {\n    const fbProvider = new firebase.auth.FacebookAuthProvider();\n    return firebase.auth().signInWithPopup(fbProvider).then(function (result) {\n        // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n        var token = result.credential.accessToken;\n        // The signed-in user info.\n        var user = result.user;\n        user.success = true;\n        return user;\n\n    }).catch(function (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        console.log(errorCode, errorMessage);\n        // The email of the user's account used.\n        var email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential;\n        // ...\n    });\n}\n\nexport const handleSignOut = () => {\n    return firebase.auth().signOut()\n        .then(res => {\n            const signedOutUser = {\n                isSignedIn: false,\n                name: '',\n                photo: '',\n                email: '',\n                error: '',\n                success: false,\n\n            }\n            return signedOutUser\n\n        }).catch(err => {\n\n        });\n}\n\nexport const createUserWithEmailAndPassword = (name, email, password) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password)\n        .then(res => {\n            const newUserInfo = res.user;\n            newUserInfo.error = '';\n            newUserInfo.success = true;\n            updateUserName(name);\n            return newUserInfo;\n        })\n\n        .catch(error => {\n            // Handle Errors here.\n            const newUserInfo = {};\n            newUserInfo.error = error.message;\n            newUserInfo.success = false;\n            console.log(error)\n            return newUserInfo;\n\n        });\n}\n\nexport const signInWithEmailAndPassword = (email, password) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password)\n        .then(res => {\n            const newUserInfo = res.user;\n            newUserInfo.error = '';\n            newUserInfo.success = true;\n            return newUserInfo;\n            //   console.log('Signing in user info', res.user)\n        })\n\n        .catch(function (error) {\n            // Handle Errors here.\n            const newUserInfo = {};\n            newUserInfo.error = error.message;\n            newUserInfo.success = false;\n            return newUserInfo;\n        });\n}\n\nconst updateUserName = name => {\n    const user = firebase.auth().currentUser;\n    user.updateProfile({\n        displayName: name\n    }).then(function () {\n        // Update successful.\n    }).catch(function (error) {\n        console.log(error);\n    });\n}","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\Main.js",["111","112"],"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\nimport { Link } from 'react-router-dom';\nimport image1 from '../Image/HomeBackground/1.jpg';\nimport image2 from '../Image/HomeBackground/2.jpg';\nimport image3 from '../Image/HomeBackground/3.jpg';\n\nconst Main = () => {\n    return (\n        <div id=\"carouselExampleIndicators\" class=\"carousel slide\" data-bs-ride=\"carousel\">\n            <ol class=\"carousel-indicators\">\n                <li data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"0\" class=\"active\"></li>\n                <li data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"1\"></li>\n                <li data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"2\"></li>\n            </ol>\n\n            <div class=\"carousel-inner\">\n                <div class=\"carousel-item active\">\n                    <img src={image1} style={{ width: '300px', height: '450px' }} class=\"d-block w-100\" alt=\"...\" />\n                </div>\n                <div class=\"carousel-item\">\n                    <img src={image2} style={{ width: '300px', height: '450px' }} class=\"d-block w-100\" alt=\"...\" />\n                </div>\n                <div class=\"carousel-item\">\n                    <img src={image3} style={{ width: '250px', height: '450px' }} class=\"d-block\" alt=\"...\" />\n                </div>\n            </div>\n            <div className=\"d-flex justify-content-center\">\n                <Link to={{\n                    pathname: \"/dashboard\",\n                    state: 'bloodDonation'\n                }}><button class=\"btn btn-outline-danger mx-2\">Blood Donation</button></Link>\n\n                <Link to={{\n                    pathname: \"/dashboard\",\n                    state: 'bloodrequisition'\n                }}><button class=\"btn btn-outline-danger \">Blood Requisition</button></Link>\n            </div>\n            <br/><br/>\n\n            <a class=\"carousel-control-prev\" href=\"#carouselExampleIndicators\" role=\"button\" data-bs-slide=\"prev\">\n                <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n\n            </a>\n            <a class=\"carousel-control-next\" href=\"#carouselExampleIndicators\" role=\"button\" data-bs-slide=\"next\">\n                <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n            </a>\n        </div>\n    );\n};\n\nexport default Main;","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\Blood\\BloodDonationUser.js",["113"],"import React, { useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nconst BloodDonationUser = () => {\n    const [donationRequest, setDonationRequest] = useState(false);\n    const { register, handleSubmit, errors } = useForm();\n    const currentform = useRef(null);\n    const onSubmitVerification = data => {\n        const mobileNumber = data.mobileNumber;\n        fetch(`https://gentle-dawn-31487.herokuapp.com/donor/${mobileNumber}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                authorization: \"pass\"\n            }\n        })\n            .then(res => res.json())\n            .then(data => {\n                if (data.length > 0) {              \n                    data.map(data => {\n                        const bloodDonateDate = data.date;\n                        var date1 = new Date(bloodDonateDate);\n                        var date2 = new Date();\n                        var diffDays = (date2.getTime() - date1.getTime()) / (1000 * 3600 * 24);\n                        const x = Math.round(diffDays)\n                        if (x > 3) {\n                            setDonationRequest(true);\n                        }\n                        else (\n                            alert('You are not eligible to donate blood or less than three months for previous blood donation ')\n                        )\n                    })\n                }\n                else {\n                    console.log('okay')\n                    setDonationRequest(true);\n                }\n            })\n    }\n\n    const onSubmit = (data) => {\n        console.log(data)\n        fetch('https://gentle-dawn-31487.herokuapp.com/donor', {\n            method: 'POST',\n            headers: { 'content-type': 'application/json' },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                if (data) {\n                    currentform.current.reset();\n                    alert('Order placed successfully')\n                }\n            })\n    }\n    return (\n        <div>\n            <h3>Please fill the form for blood donation</h3>\n            {\n                donationRequest ? <form className=\"\" ref={currentform} onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"form-group row\">\n                        <div className=\"col-3\">\n                            <input type=\"text\" ref={register({ required: true })} name=\"name\" placeholder=\"Your Name\" className=\"form-control\" />\n                            {errors.name && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-3\">\n                            <input type=\"text\" ref={register({ required: true })} name=\"mobileNumber\" placeholder=\"Mobile Number\" className=\"form-control\" />\n                            {errors.phone && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-3\">\n                            <input type=\"text\" ref={register({ required: true })} name=\"alternativeMobileNumber\" placeholder=\"alternate MobileNumber\" className=\"form-control\" />\n                            {errors.phone && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-3\">\n                            <input type=\"text\" ref={register({ required: true })} name=\"email\" placeholder=\"Email\" className=\"form-control\" />\n                            {errors.email && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <div className=\"col-2\">\n                            <input type=\"text\" ref={register({ required: true })} name=\"bloodGroup\" placeholder=\"Blood group\" className=\"form-control\" />\n                            {errors.email && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n\n                        <div className=\"col-2\">\n                            <select className=\"form-control\" name=\"gender\" ref={register({ required: true })} >\n                                <option disabled={false} value=\"Not set\">Select Gender</option>\n                                <option value=\"Male\">Male</option>\n                                <option value=\"Female\">Female</option>\n                                <option value=\"Not set\">Other</option>\n                            </select>\n                            {errors.gender && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-2\">\n                            <select className=\"form-control\" name=\"religion\" ref={register({ required: true })} >\n                                <option disabled={true} value=\"Not set\">Select Gender</option>\n                                <option value=\"Hindu\">Hindu</option>\n                                <option value=\"Islam\">Islam</option>\n                                <option value=\"Buddist\">Buddist</option>\n                                <option value=\"Christan\">Christan</option>\n                                <option value=\"Others\">Others</option>\n                            </select>\n                            {errors.gender && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-2\">\n                            <input ref={register({ required: true })} className=\"form-control\" name=\"dateOfBirth\" placeholder=\"Your Age\" type=\"number\" />\n                            {errors.age && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-2\">\n                            <input ref={register({ required: true })} className=\"form-control\" name=\"weight\" placeholder=\"Weight\" type=\"number\" />\n                            {errors.weight && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-2\">\n                            <input ref={register({ required: true })} className=\"form-control\" name=\"height\" placeholder=\"height\" type=\"number\" />\n                            {errors.weight && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <div className=\"col-4\">\n                            <input type=\"text\" ref={register({ required: true })} name=\"presentAddress\" placeholder=\"Present address holding name\" className=\"form-control\" />\n                            {errors.email && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-2\">\n                            <input ref={register({ required: true })} className=\"form-control\" name=\"union\" placeholder=\"Name of Union\" type=\"text\" />\n                            {errors.age && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-2\">\n                            <input ref={register({ required: true })} className=\"form-control\" name=\"postOffice\" placeholder=\"Post Office\" type=\"text\" />\n                            {errors.weight && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-2\">\n                            <input ref={register({ required: true })} className=\"form-control\" name=\"policeStation\" placeholder=\"Police Station\" type=\"text\" />\n                            {errors.age && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                        <div className=\"col-2\">\n                            <input ref={register({ required: true })} className=\"form-control\" name=\"district\" placeholder=\"Name of district\" type=\"text\" />\n                            {errors.weight && <span className=\"text-danger\">This field is required</span>}\n                        </div>\n                    </div>\n                    <div className=\"form-group text-right\">\n                        <button type=\"submit\" className=\"btn btn-brand\">Send</button>\n                    </div>\n                </form>\n                    :\n                    <form onSubmit={handleSubmit(onSubmitVerification)} >\n                        <input className=\"form-control input-lg col-6 mb-2\" name=\"mobileNumber\" placeholder=\"Enter your mobile number for registration\" ref={register({ required: true })} />\n                        {/* errors will return when field validation fails  */}\n                        {errors.mobileNumber && <span>This field is required</span>}\n                        <input type=\"submit\" className=\"form-control input-lg col-2 btn-outline-primary\" />\n                    </form>\n\n            }\n\n        </div>\n\n    );\n};\n\nexport default BloodDonationUser;","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\fakeData\\AdminData.js",[],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Admin\\DateForDonation.js",["114","115","116"],"import React, { useEffect, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from 'react-router-dom';\n\nconst DateForDonation = ({ isAdmin }) => {\n    const [donors, setDonors] = useState([]);\n    const [status, setStatus] = useState(false);\n    const history = useHistory();\n\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    \n    const onSubmit = data => {\n        console.log(data.mobileNumber)\n        const mobileNumber = data.mobileNumber;\n        fetch(`https://gentle-dawn-31487.herokuapp.com/donor/${mobileNumber}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                authorization: { isAdmin }\n            },\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setDonors(data)\n                setStatus(true)\n            })\n    }\n    const handleChange = (id, e) => {\n        const date = e.target.value\n        const data = { date: date }\n        console.log(data)\n        fetch(`https://gentle-dawn-31487.herokuapp.com/donor/${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(result => {\n                if (result) {\n                    console.log(result)\n                    alert('Status Updated successfully'); \n                    onSubmit(result)                   \n                }\n            })\n    }\n    return (\n        <div>            \n            {status ? <div><h4>Fixing appointment date for Blood donation</h4>\n                <table className=\"table table-borderless\" style={{ backgroundColor: \"#F4FDFB\" }}>                    \n                    <thead>\n                        <tr>\n                            <th className=\"text-secondary text-left\" scope=\"col\">Sr No</th>\n                            <th className=\"text-secondary\" scope=\"col\">Name</th>\n                            <th className=\"text-secondary\" scope=\"col\">Email ID</th>\n                            <th className=\"text-secondary\" scope=\"col\">Mobile No</th>\n                            <th className=\"text-secondary\" scope=\"col\">Address</th>\n                            <th className=\"text-secondary\" scope=\"col\">physcical Condition</th>\n                            <th className=\"text-secondary\" scope=\"col\">Appointment Date</th>\n                            <th className=\"text-secondary\" scope=\"col\">Date Change/fixed</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            donors.map((donor, index) =>\n                                <tr>\n                                    <td>{index + 1}</td>\n                                    <td>{donor.name}</td>\n                                    <td>{donor.email}</td>\n                                    <td>{donor.mobileNumber}</td>\n                                    <td>{\"Thana:\" + donor.policeStation + \", District:\" + donor.district}</td>\n                                    <td>{\"Weight:\" + donor.weight + \"Gender:\" + donor.gender}</td>\n                                    <td>{donor.date}</td>\n                                    <td>\n                                        <form onChange={(e) => handleChange(donor._id, e)}>\n                                            <input type=\"date\" name=\"date\" value=\"\" placeholder=\"Appointment schdule\" className=\"form-control\" />\n                                        </form>\n                                    </td>\n                                </tr>\n                            )\n                        }\n                    </tbody>\n                </table> \n                </div>:\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <h4>Enter Donor's mobile Number</h4><br></br>\n                    <input name=\"mobileNumber\" className=\"col-6 form-control input-lg mb-2\" placeholder=\"Enter Donor's mobile number during registration\" ref={register({ required: true })} />\n                    {/* errors will return when field validation fails  */}\n                    {errors.mobileNumber && <span>This field is required</span>}\n                    <input type=\"submit\" className=\"form-control input-lg col-2 btn-outline-success\" />\n                </form>}\n        </div>\n    );\n};\n\nexport default DateForDonation;","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\Blood\\BloodRequistUser.js",[],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Admin\\AllDonorList.js",["117"],"import React, { useEffect, useState } from 'react';\n\nconst AllDonorList = ({ isAdmin}) => {\n    const [donors, setDonors] = useState([]);\n    useEffect(() => {\n        fetch('https://gentle-dawn-31487.herokuapp.com/donor', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                 authorization: {isAdmin}\n            },\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setDonors(data)\n            }\n                )\n    }, []);\n    return (\n        <div>\n            <h3>List of all Blood Donor's</h3>\n            <table className=\"table table-borderless\" style={{ backgroundColor: \"#F4FDFB\" }}>\n                <thead>\n                    <tr>\n                        <th className=\"text-secondary text-left\" scope=\"col\">Sr No</th>\n                        <th className=\"text-secondary\" scope=\"col\">Name</th>\n                        <th className=\"text-secondary\" scope=\"col\">Email ID</th>\n                        <th className=\"text-secondary\" scope=\"col\">Mobile No</th>\n                        <th className=\"text-secondary\" scope=\"col\">Address</th>\n                        <th className=\"text-secondary\" scope=\"col\">physcical Condition</th>\n                        <th className=\"text-secondary\" scope=\"col\">Appointment Date</th>\n                        \n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        donors.map((donor, index) =>\n                            <tr>\n                                <td>{index + 1}</td>\n                                <td>{donor.name}</td>\n                                <td>{donor.email}</td>\n                                <td>{donor.mobileNumber}</td>\n                                <td>{\"Thana:\" + donor.policeStation + \", District:\" + donor.district}</td>\n                                <td>{\"Weight:\" + donor.weight + \"Gender:\" + donor.gender}</td>\n                                <td>{donor.date}</td>                                \n                            </tr>\n                        )\n                    }\n                </tbody>\n            </table>\n            \n        </div>\n    );\n};\n\nexport default AllDonorList;","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Admin\\AllBloodRequisitor.js",["118"],"import React, { useEffect, useState } from 'react';\n\nconst AllBloodRequisitor = ({isAdmin}) => {\n    const [bloodRequisition, setBloodRequisition] = useState([]);\n    useEffect(() => {\n        fetch('https://gentle-dawn-31487.herokuapp.com/request', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                 authorization: {isAdmin}\n            },\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setBloodRequisition(data)\n            }\n                )\n    }, []);\n    return (\n        <div>\n            <h3>List of all Blood requisitions</h3>\n            <table className=\"table table-borderless\" style={{ backgroundColor: \"#F4FDFB\" }}>\n                <thead>\n                    <tr>\n                        <th className=\"text-secondary text-left\" scope=\"col\">Sr No</th>\n                        <th className=\"text-secondary\" scope=\"col\">Name</th>\n                        <th className=\"text-secondary\" scope=\"col\">Email ID</th>\n                        <th className=\"text-secondary\" scope=\"col\">Mobile No</th>\n                        <th className=\"text-secondary\" scope=\"col\">Address</th>\n                        <th className=\"text-secondary\" scope=\"col\">physcical Condition</th>\n                        <th className=\"text-secondary\" scope=\"col\">Requirement Date</th>\n                        \n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        bloodRequisition.map((bloodRequisition, index) =>\n                            <tr>\n                                <td>{index + 1}</td>\n                                <td>{bloodRequisition.name}</td>\n                                <td>{bloodRequisition.email}</td>\n                                <td>{bloodRequisition.mobileNumber}</td>\n                                <td>{\"Thana:\" + bloodRequisition.policeStation + \", District:\" + bloodRequisition.district}</td>\n                                <td>{\"Weight:\" + bloodRequisition.weight + \"Gender:\" + bloodRequisition.gender}</td>\n                                <td>{bloodRequisition.dateForRequirement}</td>                                \n                            </tr>\n                        )\n                    }\n                </tbody>\n            </table>\n            \n        </div>\n    );\n};\n\nexport default AllBloodRequisitor;","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Home\\MessageModal\\MessageModal.js",["119","120"],"import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport emailjs from \"emailjs-com\";\nimport { useForm } from \"react-hook-form\";\nimport \"./MessageModal.css\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"40%\",\n  },\n};\n\nModal.setAppElement(\"#root\");\n\nconst MessageModal = ({ modalIsOpen, closeModal }) => {\n  const { register,handleSubmit, errors } = useForm();\n  \n  const onSubmit = data => {\n    console.log(data)\n    emailjs.send('564315','template_momv75k', data, 'user_PNtqALGQ9RyfIStQWc7vX')\n    .then((response) => {\n       console.log('SUCCESS!', response.status, response.text);\n    }, (err) => {\n       console.log('FAILED...', err);\n    });    \n  }\n \n  return (\n    <div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n\n        <form \n        onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"form-group\">\n            <input\n              required\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter Your Email\"\n              className=\"form-control\"\n              id=\"email\"\n              \n            />\n          </div>\n          <div className=\"form-group\">\n            <input              \n              ref={register({ required: true })}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter Your Name\"\n              className=\"form-control\"\n              id=\"name\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              ref={register({ required: true })}\n              type=\"text\"\n              name=\"subject\"\n              placeholder=\"Enter Your Subject\"\n              className=\"form-control\"\n              id=\"subject\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <textarea\n              ref={register({ required: true })}\n              className=\"form-control\"\n              name=\"message\"\n              id=\"textarea\"\n              cols=\"20\"\n              rows=\"6\"\n            ></textarea>\n          </div>\n          <button type=\"submit\" className=\"btn btn-info\">\n            Submit\n          </button>\n        </form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default MessageModal;\n","D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\money\\MoneyDonation.js",["121","122","123"],"D:\\web development\\Sajib Freelancer Site\\blood-bank\\src\\Components\\Dashboard\\money\\Payment.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":8,"nodeType":"130","messageId":"131","endLine":1,"endColumn":12},{"ruleId":"132","severity":1,"message":"133","line":128,"column":33,"nodeType":"134","endLine":128,"endColumn":45},{"ruleId":"128","severity":1,"message":"135","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"136","line":1,"column":28,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"128","severity":1,"message":"137","line":9,"column":26,"nodeType":"130","messageId":"131","endLine":9,"endColumn":41},{"ruleId":"128","severity":1,"message":"138","line":7,"column":10,"nodeType":"130","messageId":"131","endLine":7,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":27,"column":24,"nodeType":"141","messageId":"142","endLine":27,"endColumn":26},{"ruleId":"143","severity":1,"message":"144","line":28,"column":28,"nodeType":"145","messageId":"146","endLine":28,"endColumn":30},{"ruleId":"132","severity":1,"message":"133","line":38,"column":25,"nodeType":"134","endLine":38,"endColumn":54},{"ruleId":"128","severity":1,"message":"147","line":45,"column":13,"nodeType":"130","messageId":"131","endLine":45,"endColumn":18},{"ruleId":"128","severity":1,"message":"148","line":57,"column":13,"nodeType":"130","messageId":"131","endLine":57,"endColumn":18},{"ruleId":"128","severity":1,"message":"149","line":59,"column":13,"nodeType":"130","messageId":"131","endLine":59,"endColumn":23},{"ruleId":"128","severity":1,"message":"150","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"151","line":2,"column":8,"nodeType":"130","messageId":"131","endLine":2,"endColumn":16},{"ruleId":"139","severity":1,"message":"140","line":20,"column":35,"nodeType":"141","messageId":"142","endLine":20,"endColumn":37},{"ruleId":"128","severity":1,"message":"135","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"152","line":8,"column":11,"nodeType":"130","messageId":"131","endLine":8,"endColumn":18},{"ruleId":"128","severity":1,"message":"153","line":10,"column":37,"nodeType":"130","messageId":"131","endLine":10,"endColumn":42},{"ruleId":"154","severity":1,"message":"155","line":19,"column":8,"nodeType":"156","endLine":19,"endColumn":10,"suggestions":"157"},{"ruleId":"154","severity":1,"message":"155","line":19,"column":8,"nodeType":"156","endLine":19,"endColumn":10,"suggestions":"158"},{"ruleId":"128","severity":1,"message":"136","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":25},{"ruleId":"128","severity":1,"message":"159","line":22,"column":34,"nodeType":"130","messageId":"131","endLine":22,"endColumn":40},{"ruleId":"128","severity":1,"message":"153","line":7,"column":37,"nodeType":"130","messageId":"131","endLine":7,"endColumn":42},{"ruleId":"128","severity":1,"message":"159","line":7,"column":44,"nodeType":"130","messageId":"131","endLine":7,"endColumn":50},{"ruleId":"160","severity":1,"message":"161","line":19,"column":17,"nodeType":"134","endLine":19,"endColumn":77},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'setLoggedInUser' is assigned a value but never used.","'handleSignOut' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'token' is assigned a value but never used.","'email' is assigned a value but never used.","'credential' is assigned a value but never used.","'Component' is defined but never used.","'ReactDOM' is defined but never used.","'history' is assigned a value but never used.","'watch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isAdmin'. Either include it or remove the dependency array.","ArrayExpression",["164"],["165"],"'errors' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"166","fix":"168"},"Update the dependencies array to be: [isAdmin]",{"range":"169","text":"170"},{"range":"171","text":"170"},[566,568],"[isAdmin]",[603,605]]